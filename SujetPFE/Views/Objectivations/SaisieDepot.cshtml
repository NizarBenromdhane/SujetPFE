@model IEnumerable<SujetPFE.Models.ObjectifDepotViewModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Saisie des Objectifs Dépôts";
    var chargesAffaires = ViewBag.ChargesAffaires as List<SelectListItem>;
    var firstEmployeeId = Model?.FirstOrDefault()?.EmployeResponsableId?.ToString();
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --accent-color: #e74c3c;
            --light-bg: #f8f9fa;
        }

        body {
            margin: 0;
            padding: 0;
            min-width: 100vw;
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container-left {
            width: auto;
            max-width: none;
            padding: 0 15px;
            margin: 0;
            float: left;
        }

        .header-section {
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            color: white;
            padding: 1rem;
            clear: both;
        }

        .selection-card {
            background-color: white;
            padding: 1rem;
            margin: 1rem 0;
            float: left;
            width: 100%;
        }

        .left-aligned-table {
            width: auto;
            margin: 0;
            padding: 0;
            border-collapse: collapse;
            float: left;
            clear: both;
        }

            .left-aligned-table th,
            .left-aligned-table td {
                padding: 12px 8px;
                border: 1px solid #dee2e6;
                text-align: center;
                vertical-align: middle;
            }

            .left-aligned-table thead th {
                background-color: #f8f9fa;
                font-weight: 600;
                position: sticky;
                top: 0;
            }

        .group-header {
            background-color: #e9ecef;
            font-weight: bold;
            text-align: left;
            min-width: 150px;
        }

        .numeric-input input {
            width: 100%;
            text-align: end;
            padding: 4px;
            border: 1px solid #ced4da;
        }

        .btn-save {
            margin: 1rem 0;
            padding: 8px 24px;
            float: left;
            clear: both;
        }

        @@media (max-width: 992px) {
            .left-aligned-table {
                font-size: 0.85rem;
            }

                .left-aligned-table th,
                .left-aligned-table td {
                    padding: 8px 4px;
                }
        }
    </style>
</head>
<body>
    <div class="container-left">
        <div class="header-section">
            <h4>Saisie des Objectifs Dépôts</h4>
        </div>

        <div class="selection-card">
            <label class="form-label">Chargé d'Affaires:</label>
            <select class="form-select" id="ChargeAffairesId" name="ChargeAffairesId" style="width: 200px;">
                <option value="">-- Sélectionnez --</option>
                @if (chargesAffaires != null)
                {
                    foreach (var employee in chargesAffaires)
                    {
                        <option value="@employee.Value" selected="@(employee.Value == firstEmployeeId)">@employee.Text</option>
                    }
                }
            </select>
        </div>

        <form asp-action="SaisieDepot" method="post" id="objectifs-form">
            @Html.AntiForgeryToken()
            <table class="left-aligned-table">
                <thead>
                    <tr>
                        <th rowspan="2" class="group-header">Groupe</th>
                        <th colspan="4">Encours 2023</th>
                        <th colspan="3">Encours 2024</th>
                        <th colspan="5">Objectifs 2025</th>
                        <th rowspan="2">Responsable</th>
                        <th rowspan="2">% Évolution</th>
                    </tr>
                    <tr>
                        <th>Devise</th>
                        <th>Tnd DAT</th>
                        <th>Tnd DAV</th>
                        <th>Total Tnd Dep</th>
                        <th>Devise</th>
                        <th>Tnd DAT</th>
                        <th>Total Tnd Dep</th>
                        <th>Devise</th>
                        <th>Tnd DAT</th>
                        <th>Tnd DAV</th>
                        <th>Total Tnd</th>
                        <th>Total Dep</th>
                    </tr>
                </thead>
                <tbody id="groupes-data">
                    @if (Model != null)
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td class="group-header">@item.GroupeNom</td>
                                <td>@item.Devise</td>
                                <td class="text-end">@Html.DisplayFor(m => item.Encours2023Dat, "{0:N}")</td>
                                <td class="text-end">@Html.DisplayFor(m => item.Encours2023Dav, "{0:N}")</td>
                                <td class="text-end">@((item.Encours2023Dat.GetValueOrDefault() + item.Encours2023Dav.GetValueOrDefault()).ToString("N"))</td>
                                <td>@item.Devise</td>
                                <td class="text-end">@Html.DisplayFor(m => item.Encours2024Dat, "{0:N}")</td>
                                <td class="text-end">@((item.Encours2024Dat.GetValueOrDefault() + item.Encours2024Dav.GetValueOrDefault()).ToString("N"))</td>
                                <td>@item.Devise</td>
                                <td>
                                    @Html.HiddenFor(m => item.GroupeId)
                                    @Html.TextBoxFor(m => item.Objectif2025.MontantDat, new { @class = "numeric-input", type = "number", step = "0.01", min = "0" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => item.Objectif2025.MontantDav, new { @class = "numeric-input", type = "number", step = "0.01", min = "0" })
                                </td>
                                <td class="text-end fw-bold">
                                    @{
                                        var totalObjectifTnd = (item.Objectif2025?.MontantDat ?? 0) + (item.Objectif2025?.MontantDav ?? 0);
                                    }
                                    @totalObjectifTnd.ToString("N2")
                                </td>
                                <td class="text-end fw-bold">@totalObjectifTnd.ToString("N2")</td>
                                <td>
                                    @Html.DropDownListFor(m => item.EmployeResponsableId, chargesAffaires, "-- Sélectionnez --", new { @class = "form-select" })
                                </td>
                                <td class="fw-bold">
                                    @{
                                        decimal encours2024Total = (item.Encours2024Dat.GetValueOrDefault() + item.Encours2024Dav.GetValueOrDefault());
                                        decimal objectif2025Total = (item.Objectif2025?.MontantDat.GetValueOrDefault() ?? 0) + (item.Objectif2025?.MontantDav.GetValueOrDefault() ?? 0);
                                        decimal evolution = encours2024Total != 0 ? (objectif2025Total - encours2024Total) / encours2024Total : (objectif2025Total != 0 ? 1 : 0);
                                    }
                                    @evolution.ToString("P2")
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="13" class="text-center py-4">
                                <i class="bi bi-info-circle-fill fs-1 text-primary mb-3"></i>
                                <p class="fs-4">Veuillez sélectionner un chargé d'affaires</p>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-save">
                    <i class="bi bi-check-circle"></i> Enregistrer
                </button>
            </div>
        </form>
    </div>

    <script id="employees-data" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(chargesAffaires))
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Configuration
            const $chargeAffairesSelect = $('#ChargeAffairesId');
            const $groupesData = $('#groupes-data');
            const employees = JSON.parse(document.getElementById("employees-data").textContent);

            // Format number with 2 decimals
            const formatNumber = (num) => num != null ? parseFloat(num).toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '';

            // Load groupes data
            function loadGroupesData(employeId) {
                if (!employeId) {
                    showEmptyState("Veuillez sélectionner un chargé d'affaires");
                    return;
                }

                showLoadingState();

                $.ajax({
                    url: '@Url.Action("GetGroupesData", "Objectivations")',
                    type: 'GET',
                    data: { employeId: employeId },
                    success: function (data) {
                        if (data && data.length > 0) {
                            renderGroupesTable(data);
                        } else {
                            showEmptyState("Aucun groupe trouvé pour ce chargé d'affaires");
                        }
                    },
                    error: function (xhr) {
                        console.error('Erreur:', xhr);
                        showErrorState("Erreur lors du chargement des données");
                    }
                });
            }

            // Render groupes table
        function renderGroupesTable(data) {
            let html = '';

            data.forEach((item, i) => {
                const encours2023Total = (item.encours2023Dat || 0) + (item.encours2023Dav || 0);
                const encours2024Total = (item.encours2024Dat || 0) + (item.encours2024Dav || 0);
                const objectif2025TotalTnd = (item.objectif2025?.montantDat || 0) + (item.objectif2025?.montantDav || 0);
                let pourcentageEvolution = 0;
                const isResponsibleSelected = item.employeResponsableId;

                if (encours2024Total !== 0) {
                    pourcentageEvolution = (objectif2025TotalTnd - encours2024Total) / encours2024Total;
                } else if (objectif2025TotalTnd !== 0) {
                    pourcentageEvolution = 1;
                }

                html += `<tr>
                    <td class="group-header">${item.groupeNom}</td>
                    <td>${item.devise || 'EUR'}</td>
                    <td class="text-end">${formatNumber(item.encours2023Dat)}</td>
                    <td class="text-end">${formatNumber(item.encours2023Dav)}</td>
                    <td class="text-end">${formatNumber(encours2023Total)}</td>
                    <td>${item.devise || 'EUR'}</td>
                    <td class="text-end">${formatNumber(item.encours2024Dat)}</td>
                    <td class="text-end">${formatNumber(encours2024Total)}</td>
                    <td>${item.devise || 'EUR'}</td>
                    <td>
                        <input type="hidden" name="[${i}].GroupeId" value="${item.groupeId}" />
                        <input type="number" step="0.01" min="0" class="numeric-input"
                               name="[${i}].Objectif2025.MontantDat"
                               value="${formatNumber(item.objectif2025?.montantDat)}" />
                    </td>
                    <td>
                        <input type="number" step="0.01" min="0" class="numeric-input"
                               name="[${i}].Objectif2025.MontantDav"
                               value="${formatNumber(item.objectif2025?.montantDav)}" />
                    </td>
                    <td class="text-end fw-bold">${formatNumber(objectif2025TotalTnd)}</td>
                    <td class="text-end fw-bold">${formatNumber(objectif2025TotalTnd)}</td>
                    <td>
                        <select class="form-select" name="[${i}].EmployeResponsableId">
                            <option value="">-- Sélectionnez --</option>
                            ${employees.map(emp => {
                                const isSelected = isResponsibleSelected == emp.Value ? 'selected' : '';
                                return `<option value="${emp.Value}" ${isSelected}>${emp.Text}</option>`;
                            }).join('')}
                        </select>
                    </td>
                    <td class="text-end fw-bold">${isFinite(pourcentageEvolution) ? (pourcentageEvolution * 100).toFixed(2) + '%' : '100%'}</td>
                </tr>`;
            });

            $groupesData.html(html);
        }

            // Show loading state
            function showLoadingState() {
                $groupesData.html(`
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </td>
                    </tr>
                `);
            }

            // Show empty state
            function showEmptyState(message) {
                $groupesData.html(`
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <i class="bi bi-database-fill-slash fs-1 text-primary mb-3"></i>
                            <p class="fs-5">${message}</p>
                        </td>
                    </tr>
                `);
            }

            // Show error state
            function showErrorState(message) {
                $groupesData.html(`
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <i class="bi bi-exclamation-triangle-fill fs-1 text-danger mb-3"></i>
                            <p class="fs-5">${message}</p>
                            <button class="btn btn-outline-primary btn-sm mt-2" onclick="window.location.reload()">
                                <i class="bi bi-arrow-clockwise"></i> Réessayer
                            </button>
                        </td>
                    </tr>
                `);
            }

            // Event handlers
            $chargeAffairesSelect.on('change', function() {
                loadGroupesData($(this).val());
            });

            // Form submission
            $('#objectifs-form').on('submit', function(e) {
                $('button[type="submit"]').html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enregistrement...');
            });

            // Initial load if employee is selected
            if ($chargeAffairesSelect.val()) {
                loadGroupesData($chargeAffairesSelect.val());
            }
        });
    </script>
</body>
</html>